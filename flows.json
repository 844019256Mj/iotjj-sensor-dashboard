[
    {
        "id": "f074a6e9a2370e56",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e1c81a798aa15732",
        "type": "mqtt in",
        "z": "f074a6e9a2370e56",
        "name": "Temperatura",
        "topic": "casa/temperatura",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a7603f8e8449f783",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 40,
        "wires": [
            [
                "0b0ba478bac76afc",
                "6db50ad59e19bb8d",
                "81c1146986926172"
            ]
        ]
    },
    {
        "id": "37541df21a380052",
        "type": "mqtt in",
        "z": "f074a6e9a2370e56",
        "name": "Humidade",
        "topic": "casa/humidade",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a7603f8e8449f783",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 500,
        "y": 40,
        "wires": [
            [
                "bd81c3bc1ab9bea8",
                "6b33249370908bd3"
            ]
        ]
    },
    {
        "id": "6db50ad59e19bb8d",
        "type": "ui_gauge",
        "z": "f074a6e9a2370e56",
        "name": "",
        "group": "3f09d5abb3673bfb",
        "order": 0,
        "width": "0",
        "height": "0",
        "gtype": "gage",
        "title": "Temperatura",
        "label": "*C",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 290,
        "y": 100,
        "wires": []
    },
    {
        "id": "0b0ba478bac76afc",
        "type": "debug",
        "z": "f074a6e9a2370e56",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 20,
        "wires": []
    },
    {
        "id": "bd81c3bc1ab9bea8",
        "type": "debug",
        "z": "f074a6e9a2370e56",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 20,
        "wires": []
    },
    {
        "id": "6b33249370908bd3",
        "type": "ui_chart",
        "z": "f074a6e9a2370e56",
        "name": "Humidade",
        "group": "3f09d5abb3673bfb",
        "order": 1,
        "width": "0",
        "height": "0",
        "label": "Humidade",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "81c1146986926172",
        "type": "ui_chart",
        "z": "f074a6e9a2370e56",
        "name": "Temperature graphics",
        "group": "3f09d5abb3673bfb",
        "order": 2,
        "width": "0",
        "height": "0",
        "label": "Temperature Grafico",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 320,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "8afb5a216a5dd85d",
        "type": "http request",
        "z": "f074a6e9a2370e56",
        "name": "OpenWeatherMap API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Maputo&appid=592e7c0c8d0dc6bd26a6d77ea013086a&units=metric&lang=pt",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 300,
        "y": 160,
        "wires": [
            [
                "4133f44256142176"
            ]
        ]
    },
    {
        "id": "4133f44256142176",
        "type": "function",
        "z": "f074a6e9a2370e56",
        "name": "Processar Clima OWM COM PRECIPITA√á√ÉO",
        "func": "// Processar Dados OpenWeatherMap - Precipita√ß√£o Apenas Textual\nif (!msg.payload || !msg.payload.main || !msg.payload.wind) {\n    node.error(\"Dados inv√°lidos da API: \" + JSON.stringify(msg.payload));\n    return [null, null, null];\n}\n\n// Debug: Log do que a API retornou (remova ap√≥s testar)\nnode.warn(\"Resposta OWM: \" + JSON.stringify({ main: msg.payload.main, wind: msg.payload.wind, rain: msg.payload.rain, weather: msg.payload.weather }));\n\n// Output 1: Press√£o (para gauge de press√£o)\nvar msg1 = {\n    payload: msg.payload.main.pressure,\n    topic: \"pressao\"\n};\n\n// Output 2: Vento Velocidade (para gauge de vento)  \nvar msg2 = {\n    payload: msg.payload.wind.speed,\n    topic: \"vento_velocidade\"\n};\n\n// Output 3: Descri√ß√£o (para texto UI) - Com precipita√ß√£o sempre vis√≠vel\nvar precipitacao = 0;\nif (msg.payload.rain && msg.payload.rain[\"1h\"]) {\n    precipitacao = msg.payload.rain[\"1h\"];\n} else if (msg.payload.rain && msg.payload.rain[\"3h\"]) {\n    // Fallback para 3h se dispon√≠vel\n    precipitacao = msg.payload.rain[\"3h\"] / 3;\n}\n\nvar descricao = msg.payload.weather ? msg.payload.weather[0].description || \"N/A\" : \"N/A\";\nvar textoPrecipitacao;\nvar iconeChuva = precipitacao > 0 ? \"üåßÔ∏è\" : \"üå§Ô∏è\";\nif (precipitacao > 0) {\n    textoPrecipitacao = ` | ${iconeChuva} Chuva: ${precipitacao.toFixed(1)} mm`;\n} else {\n    textoPrecipitacao = ` | ${iconeChuva} Sem chuva: 0 mm`;\n}\n\nvar msg3 = {\n    payload: `Press√£o: ${msg.payload.main.pressure} hPa | Vento: ${msg.payload.wind.speed} m/s${textoPrecipitacao} | ${descricao.toUpperCase()}`,\n    topic: \"descricao_clima\"\n};\n\nnode.warn(\"Precipita√ß√£o processada: \" + precipitacao + \" mm\");  // Debug\n\nreturn [msg1, msg2, msg3];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 160,
        "wires": [
            [
                "3c7eddfb0377af25"
            ],
            [
                "b4a54a877a3f64b8"
            ],
            [
                "39f7f5c85f8fa931"
            ]
        ]
    },
    {
        "id": "3c7eddfb0377af25",
        "type": "ui_gauge",
        "z": "f074a6e9a2370e56",
        "name": "Press√£o Externa",
        "group": "grupo-clima-externo",
        "order": 1,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "üìä Press√£o Atmosf√©rica",
        "label": "hPa",
        "format": "{{value}}",
        "min": 900,
        "max": 1100,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#2ca02c"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 120,
        "wires": []
    },
    {
        "id": "b4a54a877a3f64b8",
        "type": "ui_gauge",
        "z": "f074a6e9a2370e56",
        "name": "Velocidade do Vento",
        "group": "grupo-clima-externo",
        "order": 2,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "üí® Velocidade do Vento",
        "label": "m/s",
        "format": "{{value}}",
        "min": 0,
        "max": 20,
        "colors": [
            "#d62728",
            "#ff9896",
            "#9467bd"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 920,
        "y": 160,
        "wires": []
    },
    {
        "id": "39f7f5c85f8fa931",
        "type": "ui_text",
        "z": "f074a6e9a2370e56",
        "group": "grupo-clima-externo",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "Condi√ß√µes Atuais",
        "label": "üå§Ô∏è Condi√ß√µes em Maputo",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 930,
        "y": 200,
        "wires": []
    },
    {
        "id": "39d8dbd25a671b6c",
        "type": "inject",
        "z": "f074a6e9a2370e56",
        "name": "Atualizar Clima",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 3,
        "topic": "update",
        "payload": "true",
        "payloadType": "bool",
        "x": 80,
        "y": 160,
        "wires": [
            [
                "8afb5a216a5dd85d"
            ]
        ]
    },
    {
        "id": "308b781813962c11",
        "type": "function",
        "z": "f074a6e9a2370e56",
        "name": "Combinar Dados",
        "func": "// COMBINAR TEMPERATURA E HUMIDADE NA MESMA LINHA\nif (msg.topic === 'casa/temperatura') {\n    context.set('ultima_temperatura', parseFloat(msg.payload));\n    node.warn('üìä Temperatura guardada: ' + parseFloat(msg.payload));\n} \nelse if (msg.topic === 'casa/humidade') {\n    context.set('ultima_humidade', parseFloat(msg.payload));\n    node.warn('üíß Humidade guardada: ' + parseFloat(msg.payload));\n}\n\n// Verificar se temos ambos valores\nvar temperatura = context.get('ultima_temperatura');\nvar humidade = context.get('ultima_humidade');\n\n// Se temos ambos, inserir no banco\nif (temperatura !== undefined && humidade !== undefined) {\n    node.warn('‚úÖ Inserindo COMBINADO: Temp=' + temperatura + '¬∞C, Hum=' + humidade + '%');\n    \n    msg.params = [temperatura, humidade];\n    msg.payload = {\n        \"sql\": \"INSERT INTO dht11_data (temperatura, humidade) VALUES (?, ?)\"\n    };\n    \n    // Limpar contexto ap√≥s inserir\n    context.set('ultima_temperatura', undefined);\n    context.set('ultima_humidade', undefined);\n    \n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "x": 270,
        "y": 240,
        "wires": [
            [
                "30b0669fc9b471a5"
            ]
        ]
    },
    {
        "id": "30b0669fc9b471a5",
        "type": "sqlite",
        "z": "f074a6e9a2370e56",
        "mydb": "2a8159e9c173d43d",
        "sqlquery": "prepared",
        "sql": "INSERT INTO dht11_data (temperatura, humidade) VALUES (?, ?)",
        "name": "Inserir Dados Combinados",
        "x": 520,
        "y": 240,
        "wires": [
            [
                "433bc22d222a6ff9"
            ]
        ]
    },
    {
        "id": "433bc22d222a6ff9",
        "type": "debug",
        "z": "f074a6e9a2370e56",
        "name": "Debug Inser√ß√£o",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 760,
        "y": 240,
        "wires": []
    },
    {
        "id": "ec34ad19aef45291",
        "type": "inject",
        "z": "f074a6e9a2370e56",
        "name": "üîÑ Atualizar Tabela",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "atualizar_tabela",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "function-consulta-tabela"
            ]
        ]
    },
    {
        "id": "3775bc0bf2dfe922",
        "type": "sqlite",
        "z": "f074a6e9a2370e56",
        "mydb": "2a8159e9c173d43d",
        "sqlquery": "prepared",
        "sql": "SELECT * FROM dht11_data ORDER BY timestamp DESC LIMIT 5",
        "name": "Consultar Dados",
        "x": 570,
        "y": 340,
        "wires": [
            [
                "d5fb5878d49c2b92"
            ]
        ]
    },
    {
        "id": "aec41d35ee1855c3",
        "type": "ui_template",
        "z": "f074a6e9a2370e56",
        "group": "group-dashboard",
        "name": "üìä Tabela de Dados",
        "order": 3,
        "width": 12,
        "height": 8,
        "format": "<div style='padding: 15px; font-family: Arial, sans-serif;'>\n  <h3 style='color: #2c3e50; margin-bottom: 15px;'>üìÖ Hist√≥rico de Dados - Sistema Solar</h3>\n  \n  <div style='overflow-x: auto;'>\n    <table style='width: 100%; border-collapse: collapse; border: 1px solid #ddd; font-size: 14px;'>\n      <thead>\n        <tr style='background-color: #34495e; color: white;'>\n          <th style='padding: 12px; border: 1px solid #ddd; text-align: left;'>Data/Hora</th>\n          <th style='padding: 12px; border: 1px solid #ddd; text-align: center;'>üå°Ô∏è Temperatura</th>\n          <th style='padding: 12px; border: 1px solid #ddd; text-align: center;'>üíß Humidade</th>\n        </tr>\n      </thead>\n      <tbody id=\"tabela-corpo\">\n        <tr>\n          <td colspan=\"3\" style=\"padding: 20px; text-align: center; color: #7f8c8d;\">\n            üìã Carregando dados...\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  \n  <div style='margin-top: 10px; font-size: 12px; color: #95a5a6; text-align: center;'>\n    Atualizado: <span id=\"update-time\"></span>\n  </div>\n</div>\n\n<script>\n  // Atualizar timestamp\n  document.getElementById('update-time').textContent = new Date().toLocaleString('pt-PT');\n  \n  // Fun√ß√£o para atualizar a tabela quando chegarem dados\n  function atualizarTabela(dados) {\n    var tbody = document.getElementById('tabela-corpo');\n    \n    if (!dados || dados.length === 0) {\n      tbody.innerHTML = '<tr><td colspan=\"3\" style=\"padding: 20px; text-align: center; color: #7f8c8d;\">üìã Aguardando dados do sensor...</td></tr>';\n      return;\n    }\n    \n    var html = '';\n    dados.forEach(function(item, index) {\n      var bgColor = index % 2 === 0 ? '#f8f9fa' : 'white';\n      html += '<tr style=\"background-color: ' + bgColor + ';\">';\n      html += '<td style=\"padding: 10px; border: 1px solid #ddd;\">' + (item.data_hora || '-') + '</td>';\n      html += '<td style=\"padding: 10px; border: 1px solid #ddd; text-align: center; font-weight: bold; color: #e74c3c;\">' + (item.temperatura || '-') + '¬∞C</td>';\n      html += '<td style=\"padding: 10px; border: 1px solid #ddd; text-align: center; font-weight: bold; color: #3498db;\">' + (item.humidade || '-') + '%</td>';\n      html += '</tr>';\n    });\n    \n    tbody.innerHTML = html;\n    document.getElementById('update-time').textContent = new Date().toLocaleString('pt-PT');\n  }\n  \n  // Observar mudan√ßas nos dados\n  this.scope.$watch('msg', function(newMsg) {\n    if (newMsg && newMsg.payload) {\n      atualizarTabela(newMsg.payload);\n    }\n  });\n  \n  // Atualizar inicialmente se j√° houver dados\n  if (this.scope.msg && this.scope.msg.payload) {\n    atualizarTabela(this.scope.msg.payload);\n  }\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1060,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "d478b6ab0fca55e8",
        "type": "ui_text",
        "z": "f074a6e9a2370e56",
        "group": "group-dashboard",
        "order": 4,
        "width": 6,
        "height": 4,
        "name": "üìà Resumo Estat√≠stico",
        "label": "",
        "format": "üìä RESUMO ESTAT√çSTICOüìã Total de Registros: {{payload.total}}üî• M√°x. Temperatura: {{payload.max_temp}}¬∞Cüíß M√°x. Humidade: {{payload.max_hum}}%‚è∞ √öltima Leitura: {{payload.ultima_data}}",
        "layout": "",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1070,
        "y": 360,
        "wires": []
    },
    {
        "id": "b8f06ed410a4e805",
        "type": "mqtt in",
        "z": "f074a6e9a2370e56",
        "name": "Temperatura",
        "topic": "casa/temperatura",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a7603f8e8449f783",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 70,
        "y": 220,
        "wires": [
            [
                "308b781813962c11"
            ]
        ]
    },
    {
        "id": "ca760d9267f1db59",
        "type": "mqtt in",
        "z": "f074a6e9a2370e56",
        "name": "Humidade",
        "topic": "casa/humidade",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a7603f8e8449f783",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 60,
        "y": 280,
        "wires": [
            [
                "308b781813962c11"
            ]
        ]
    },
    {
        "id": "function-consulta-tabela",
        "type": "function",
        "z": "f074a6e9a2370e56",
        "name": "Consultar para Tabela",
        "func": "// Consultar dados combinados do SQLite - VERS√ÉO DEFINITIVA\nif (msg.topic === 'atualizar_tabela' || msg.topic === 'casa/temperatura' || msg.topic === 'casa/humidade') {\n    \n    // CONSULTA CORRIGIDA - V√°rias tentativas de formato de data\n    msg.payload = {\n        \"sql\": \"SELECT timestamp as data_bruta, temperatura, humidade FROM dht11_data WHERE temperatura IS NOT NULL AND humidade IS NOT NULL ORDER BY timestamp DESC LIMIT 15\"\n    };\n    msg.params = [];\n    \n    node.warn('üîç Executando consulta SQL (timestamp bruto)...');\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "x": 340,
        "y": 340,
        "wires": [
            [
                "3775bc0bf2dfe922"
            ]
        ]
    },
    {
        "id": "d5fb5878d49c2b92",
        "type": "function",
        "z": "f074a6e9a2370e56",
        "name": "Processar para Template",
        "func": "// Processar dados para o UI Template - CORRIGIDO\nnode.warn('üîç Iniciando processamento de dados...');\n\nif (msg.payload && msg.payload.length > 0) {\n    \n    // 1. Preparar dados para a tabela\n    var dadosTabela = [];\n    var maxTemp = 0;\n    var maxHum = 0;\n    \n    msg.payload.forEach(function(registro, index) {\n        // FORMATAR DATA - AGORA CORRETO!\n        var dataFormatada = '-'; // valor padr√£o\n        \n        if (registro.timestamp) {\n            try {\n                // O timestamp j√° vem no formato correto: \"2025-10-15 18:26:51\"\n                var data = new Date(registro.timestamp);\n                if (!isNaN(data.getTime())) {\n                    dataFormatada = data.toLocaleString('pt-PT');\n                } else {\n                    // Se n√£o conseguir converter, usar o timestamp original\n                    dataFormatada = registro.timestamp;\n                }\n            } catch (e) {\n                node.warn('‚ö†Ô∏è Erro ao formatar data: ' + e);\n                dataFormatada = registro.timestamp; // usar original\n            }\n        }\n        \n        var linha = {\n            data_hora: dataFormatada,\n            temperatura: registro.temperatura ? registro.temperatura.toFixed(1) : '-',\n            humidade: registro.humidade ? registro.humidade.toFixed(1) : '-',\n            alternate: (index % 2 === 0)\n        };\n        dadosTabela.push(linha);\n        \n        // Calcular m√°ximos\n        if (registro.temperatura > maxTemp) maxTemp = registro.temperatura;\n        if (registro.humidade > maxHum) maxHum = registro.humidade;\n    });\n    \n    // 2. Preparar estat√≠sticas\n    var stats = {\n        total: dadosTabela.length,\n        max_temp: maxTemp.toFixed(1),\n        max_hum: maxHum.toFixed(1),\n        ultima_data: dadosTabela[0].data_hora\n    };\n    \n    node.warn('‚úÖ Dados processados: ' + dadosTabela.length + ' registros');\n    node.warn('üìÖ Primeira data formatada: ' + dadosTabela[0].data_hora);\n    \n    // 3. Enviar dados\n    return [\n        { payload: dadosTabela },  // Para a tabela\n        { payload: stats }         // Para as estat√≠sticas\n    ];\n}\n\n// Se n√£o h√° dados\nnode.warn('‚ö†Ô∏è Nenhum dado para processar - enviando vazio');\nreturn [\n    { payload: [] },  // Tabela vazia\n    { payload: { total: 0, max_temp: '0.0', max_hum: '0.0', ultima_data: 'Nenhum' } }\n];",
        "outputs": 2,
        "x": 810,
        "y": 340,
        "wires": [
            [
                "aec41d35ee1855c3"
            ],
            [
                "d478b6ab0fca55e8"
            ]
        ]
    },
    {
        "id": "a7603f8e8449f783",
        "type": "mqtt-broker",
        "name": "TH",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3f09d5abb3673bfb",
        "type": "ui_group",
        "name": "Temperatura e Humidade",
        "tab": "d8fef3a0d83053ee",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "grupo-clima-externo",
        "type": "ui_group",
        "name": "Dados Meteorol√≥gicos Externos",
        "tab": "d8fef3a0d83053ee",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2a8159e9c173d43d",
        "type": "sqlitedb",
        "db": "C:\\Users\\Eng. Jos√© Armando\\.node-red\\dados_sensor.db",
        "mode": "RWC"
    },
    {
        "id": "group-dashboard",
        "type": "ui_group",
        "name": "Monitor Solar",
        "tab": "d8fef3a0d83053ee",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d8fef3a0d83053ee",
        "type": "ui_tab",
        "name": "DHT11",
        "icon": "fa-sun",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "604d7b33f67978e5",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-dashboard": "3.6.6",
            "node-red-node-sqlite": "1.1.1"
        }
    }
]
